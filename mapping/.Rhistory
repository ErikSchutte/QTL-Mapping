file.names <- dir(path, "*.R")
setwd("~/Dropbox/Erik Schutte Internship 2016/Code/QTL-Mapping/") # set path to install from github
path = file.path(getwd(),"source/")
file.names <- dir(path, "*.R")
path
file.names <- dir(path, "*.R")
getwd
getwd()
path
list.files(path)
list.files(path)
list.files(path = path, pattern="*.R")
setwd("~/Dropbox/Erik Schutte Internship 2016/Code/QTL-Mapping/mapping") # set path to install from github
path = file.path(getwd(),"source/")
file.names <- dir(path, "*.R")
for ( name in file.names ) {
source( file.path( path, name ) )
}
file.names <- dir(path, "*.R")
for ( name in file.names ) {
source( file.path( path, name ) )
}
cat("Loading packages, if not present, they are installed.\n\nThis may take a while.\n\n")
setwd("~/Dropbox/Erik Schutte Internship 2016/Code/QTL-Mapping/mapping") # set path to install from github
path = file.path(getwd(),"source/")
file.names <- dir(path, "*.R")
file.names
source(file.names[1])
path = file.path(getwd(),"source/")
file.names <- dir(path, "*.R")
file.names
file.names[1]
source(file.path(path, file.names[1]) )
source(file.path(path, file.names[2]) )
source(file.path(path, file.names[3]) )
source(file.path(path, file.names[4]) )
source(file.path(path, file.names[5]) )
source(file.path(path, file.names[6]) )
source(file.path(path, file.names[7]) )
source(file.path(path, file.names[8]) )
source(file.path(path, file.names[9]) )
source(file.path(path, file.names[10]) )
source(file.path(path, file.names[11]) )
source(file.path(path, file.names[12]) )
source(file.path(path, file.names[13]) )
source(file.path(path, file.names[14]) )
source(file.path(path, file.names[15]) )
for ( name in file.names ) {
source( file.path( path, name ) )
}
main <- function() {
cat("\n\n")
### Call functions
## Settings.
# Loads defualt settings.
settings()
## parseOpts.
# Parses command line options.
parseOpts()
### Output
## Show output on terminal.
# Let the user know the program started.
cat("Starting eQTL-mapping.R..\n\nLoading files..\n\n")
# Print if the files are loaded.
cat("Files loaded:\n",as.character(args[2][[1]]),"\n",as.character(args[3]),
"\n\nMapping Type:\n",as.character(args[1][[1]]),"\n")
### Running the directory preperation
## Loading files
# Checking existing paths.
cat("\nCheck if directorys exist..\n\n")
## Checking directories.
# Main directory, should be universal on every system.
global("mainDir", "~/Documents/")
# Sub directory.
global("subDir", "R/")
### Prepare data
## prepare data files for mapping.
# Call data_prep to prepare data.
data_prep()
## Check Type.
# Check the mapping type.
if ( MAPPING_TYPE == 'basic') {
# Create directory for the Basic results.
createDir("Basic")
# Map eQTLs.
eQTL()
} else if ( MAPPING_TYPE == 'ct' ) {
# Create directory for the Cis results.
createDir("Cis")
# Create directory for the Trans results.
createDir("Trans")
# Map cis- trans-eQTLs.
ctQTL()
} else if ( MAPPING_TYPE == 's' ) {
# Create directory for the Splice results.
createDir("Splice")
# Map splice QTLs.
sQTL()
} else {
error("No mapping type accepted", "Something unexpected")
}
}
settings()
global("args",list("ct","~/Dropbox/Erik/clones_CeD_genotypes_noDuplicates.Rdata","~/Dropbox/Erik/expr_vst_condition_patient_rmBatch_88samples.Rdata"))
parseOpts()
cat("Starting eQTL-mapping.R..\n\nLoading files..\n\n")
cat("Files loaded:\n",as.character(args[2][[1]]),"\n",as.character(args[3]),
"\n\nMapping Type:\n",as.character(args[1][[1]]),"\n")
cat("\nCheck if directorys exist..\n\n")
global("mainDir", "~/Documents/")
global("subDir", "R/")
data_prep()
snps <- snps[-(23:27),]
tmp.df <- t(data.frame("TCC-01-3"=snps[15,]))
snps <- rbind(snps, tmp.df)
rownames(snps)[which(rownames(snps) == "TCC.01.3")] <- "TCC-01-3"
tmp.df <- t(data.frame(MAF=rep("",length(colnames(snps)))))
snps.genotype <- rbind(snps, tmp.df)
snps.discarded <- c()
snps.discarded.pos <- c()
snps.discarded.counter <- 0
GE <- GE[,-grep("batch\\d+_TCC-17",colnames(GE))]
if ( length(grep("\\.",colnames((GE))) != 0) ) {
colnames(GE) <- gsub("\\.", "_", colnames(GE))
} else if ( length(grep("\\-",colnames((GE))) != 0) ) {
colnames(GE) <- gsub("\\-", "_", colnames(GE))
}
if ( length( grep("\\d+_T", colnames(GE)) != 0 ) ) {
colnames(GE) <- gsub("_T", "__T", colnames(GE))
colnames(GE) <- gsub("_t", "__t", colnames(GE))
}
if ( length(grep("-",rownames(snps)) != 0) ) {
rownames(snps) <- gsub("\\-", "_", rownames(snps))
rownames(snps.genotype) <- gsub("\\-", "_", rownames(snps.genotype))
}
indices.snps <- c()
snps.old <- snps
for (colname in colnames(GE)){
# Save indices, where the rownames from the gene expression co-exist in the
# genotype matrix.
strs <- strsplit(colname,"__")
indices.snps <- c(indices.snps,grep(strs[[1]][2],rownames(snps)))
}
snps <- snps[unique(indices.snps),]
snps.genotype <- snps.genotype[unique(indices.snps),]
conames(GE)
colnames(GE)
head(GE)
global("args",list("ct","~/Dropbox/Erik/clones_CeD_genotypes_noDuplicates.Rdata","~/Dropbox/Erik/expr_vst_condition_patient_rmBatch_88samples.Rdata"))
parseOpts()
snps <- snps[-(23:27),]
tmp.df <- t(data.frame("TCC-01-3"=snps[15,]))
snps <- rbind(snps, tmp.df)
rownames(snps)[which(rownames(snps) == "TCC.01.3")] <- "TCC-01-3"
tmp.df <- t(data.frame(MAF=rep("",length(colnames(snps)))))
snps.genotype <- rbind(snps, tmp.df)
snps.discarded <- c()
snps.discarded.pos <- c()
snps.discarded.counter <- 0
grep("batch\\d+_TCC-17",colnames(GE))
colnames(GE)
grep("batch\\d+__TCC.17",colnames(GE))
if ( length(grep("\\.",colnames((GE))) != 0) ) {
colnames(GE) <- gsub("\\.", "_", colnames(GE))
} else if ( length(grep("\\-",colnames((GE))) != 0) ) {
colnames(GE) <- gsub("\\-", "_", colnames(GE))
}
if ( length( grep("\\d+_T", colnames(GE)) != 0 ) ) {
colnames(GE) <- gsub("_T", "__T", colnames(GE))
colnames(GE) <- gsub("_t", "__t", colnames(GE))
}
if ( length(grep("-",rownames(snps)) != 0) ) {
rownames(snps) <- gsub("\\-", "_", rownames(snps))
rownames(snps.genotype) <- gsub("\\-", "_", rownames(snps.genotype))
}
indices.snps <- c()
snps.old <- snps
for (colname in colnames(GE)){
# Save indices, where the rownames from the gene expression co-exist in the
# genotype matrix.
strs <- strsplit(colname,"__")
indices.snps <- c(indices.snps,grep(strs[[1]][2],rownames(snps)))
}
snps <- snps[unique(indices.snps),]
snps.genotype <- snps.genotype[unique(indices.snps),]
if ( VERBOSE == TRUE ) {
cat("Samples that are NOT in the VST but ARE in the genotype file:\n")
print(rownames(snps.old[which(!rownames(snps.old) %in% rownames(snps) ),]) )
cat("Samples genotype file:\n")
print(rownames(snps))
cat("Number of samples: \n")
print(length(rownames(snps)))
}
indices.ge <- c()
ge.old <- GE
for (rowname in rownames(snps)) {
# Save indices, where the rownames from the genotype matrix co-exist in the
# gene expression matrix.
indices.ge <- c(indices.ge,  grep(rowname, colnames(GE)))
}
GE <- GE[,indices.ge]
if ( VERBOSE == TRUE ) {
cat("\nSamples that are NOT in the genotype file but ARE in the VST file:\n")
print(colnames(ge.old[,which(!colnames(ge.old) %in% colnames(GE))] ) )
cat("Samples VST file:\n")
print(colnames(GE))
cat("Number of samples: \n")
print(length(colnames(GE)))
}
snps <- rbind(snps, tmp.df)
for (i in 1:ncol(snps)) {
# Verbose
if ( VERBOSE == TRUE ) {
# Verbose - Print current column and column name.
cat("#",i,"- current column: ",colnames(snps)[i],"\n")
}
# Save genotype and genotype count for each column.
alleles.all <- table(snps[,i])[-1]
# A minimum of 3 samples for a genotype is required to effectively calculate correlation.
# Therefore we are removing the rows where this is not the case.
if ( length(alleles.all) < 3 & min(alleles.all) < 2) {
# Set an index for the SNP, so that it can be removed later.
snps.discarded.pos <- c(snps.discarded.pos,i)
# Store the discarded SNP for later review.
snps.discarded <- c(snps.discarded, colnames(snps)[i])
snps.discarded.counter <- snps.discarded.counter + 1
}
# List with all the major, minor, and heterozygote genotypes and their respecitve counts.
allele.list <- list(major <- list(genotype =NULL,count=0),
minor <- list(genotype =NULL,count=0),
hetero <- list(genotype =c(),count=c()),
other <- list(genotype =NULL,count=0))
# Temp value for checking which genotype occurs the most.
highest_count_homozygote <- 0
# For every allele that the genotype is counted for.
for (a in 1:length(alleles.all)) {
# Extract the genotype.
geno <- names(alleles.all[a])
# Verbose
if ( VERBOSE == TRUE ) {
# Verbose - Print current allele.
cat("Current allele = ", geno,'\n')
}
# Extract the number of occurrences.
count <- alleles.all[[a]]
# Split the genotype
alleles <- strsplit(geno, "")
#Check if the first allele is the same as the second
# thus checking for heterozygote or homozygote genotype.
if (identical(alleles[[1]][1],alleles[[1]][2]) & geno != '00') {
# Verbose
if ( VERBOSE == TRUE ) {
# Verbose - Print if alleles are identical, and thus are homozygous.
cat('Alleles are identical, sorted as homozygote\n')
}
# If the highest_count_homozygote == 0 (the first iteration).
if (highest_count_homozygote == 0) {
# Verbose
if ( VERBOSE == TRUE ) {
# Verbose - Print which genotype and count is added as major allele.
cat("Adding ",geno," with count ", count, "as major allele\n")
}
# For the first iteration, the first genotype's occurences are the most occured
# genotype and will be added on the first position.
highest_count_homozygote <- count
allele.list[[1]]$genotype <- geno
allele.list[[1]]$count <- count
# If the current genotype has more occurences than the lastly noted genotype,
# it is automatically the major allele on the first position.
} else if (highest_count_homozygote < count) {
# Verbose
if ( VERBOSE == TRUE ) {
# Verbose - Print which genotype and count is added as new major allele,
# and which genotype and count previously occupied that spot.
cat("Adding ",geno," with count ", count, "as major allele\nPreviously ",
allele.list[[1]]$genotype," with count ", allele.list[[1]]$count,'\n')
}
# Altering the position from the previous current major allele to minor allele
# in the allele.list.
allele.list[[2]]$genotype <- allele.list[[1]]$genotype
allele.list[[2]]$count <- allele.list[[1]]$count
# Setting the new major allele on the first position.
highest_count_homozygote <- count
allele.list[[1]]$genotype <- geno
allele.list[[1]]$count <- count
} else {
# If the highest occuring genotype already found has more occurences,
# the resulting genotype will be the minor allele which is the 2nd position
# in the list.
allele.list[[2]]$genotype <- geno
allele.list[[2]]$count <- count
# Verbose
if ( VERBOSE == TRUE ) {
# Verbose - Print which genotype and count is added as minor allele.
cat("Adding ",geno," with count ", count, "as minor allele\n")
}
}
} else {
if (identical(geno,'00')) {
# Separating the '00'/NA's from the data, these will be represented as 9.
allele.list[[4]]$genotype <- geno
allele.list[[4]]$count <- count
} else {
# If the genotype is not '00' it is automatically a heterozygote.
allele.list[[3]]$genotype <- c(allele.list[[3]]$genotype, geno)
allele.list[[3]]$count <- c(allele.list[[3]]$count, count)
# Verbose
if ( VERBOSE == TRUE ) {
# Verbose - Print if genes are not identical, and thus are heterozygote.
cat('alleles are not identical, heterozygote\n')
# Verbose - Print which genotype and count is added as heterozygous.
cat("Adding ",geno," with count ", count, "as heterozygote allele\n")
}
}
}
}
# For every row in the genotype data.
for (j in 1:nrow(snps) ) {
# First we want to create a dict that takes the inverse of the MAJOR alleles we put there,
# since we do not save all the minor alleles.
#list()
# If J is smaller than the maximum lengt of rows, e.g. all the samples minus the last row
# where the MAF will be stored.
if (j < (nrow(snps) ) ) {
# Check the current snp agains the determined major, minor and heterozygote genotypes,
# and determine the allele frequency.
snp.freq <- change_allele_to_frequencies(snps[j,i],allele.list)
# Verbose.
if ( VERBOSE == TRUE ) {
# Verbose - Print the current snip' genotype and the corrosponding frequency.
cat("Changing current snip: ",snps[j,i]," to: ", snp.freq,"\n")
}
if ( length(allele.list[[3]]$genotype) > 1) {
if ( snps[j,i] != allele.list[[3]]$genotype[1] && snps[j,i] == allele.list[[3]]$genotype[2]) {
snps.genotype[j,i] <- allele.list[[3]]$genotype[1]
}
}
# Save the SNP frequency at previous occupied genotype location.
snps[j,i] <- snp.freq
}
# J is equal to the length of rows for the data frame snps. meaning it is hte last row that will contain
# the MAF.
else {
# We don't always have the minor allele, so instead we look at the major and heterozygous genotypes.
# E.g. all 22 samples have the following genotyeps for snp X, TT (19x) CT (3x) CC(0x).
# Because we can't count CC we have no genotype CC and thus have to 'create' it.
major.allele = strsplit(allele.list[[1]]$genotype,"")[[1]] # Contains both alleles, e.g. T and T.
if ( length(allele.list[[3]]$genotype) < 1 && length(allele.list[[2]]$genotype) < 1 ) {
# In the off case that there are TT(22x) CT(0x) CC(0x)
minor.allele <- "?"
} else if ( length(allele.list[[3]]$genotype) < 1 && length(allele.list[[2]]$genotype) > 0 ) {
# In the off case that there are TT(17x) CT(0x) CC(5x)
minor <- allele.list[[2]]$genotype
minor.alleles <- strsplit(minor,"")[[1]]
minor.allele <- minor.alleles[1]
} else {
heter.allele = strsplit(allele.list[[3]]$genotype,"")[[1]] # Contains both alleles, e.g. C and T.
if ( heter.allele[1] == major.allele[1] ) {
# If the first allele, in our example C matches the major allele T we know that he minor allele must be
# the second allele of the heterozygous alleles.
minor.allele <- heter.allele[2]
} else if ( heter.allele[2] == major.allele[1] ) {
# If the second allele, in our exmaple T matches the major allele T we know that the minior allele must be
# the first allele of the heterozgyous alleles.
minor.allele <- heter.allele[1]
}
}
# Save the genotypes in the data frame as MINOR / MAJOR.
alleles <- paste(minor.allele, "_", major.allele[1], sep="")
snps[j,i] <- alleles
}
}
}
snps.maf <- data.frame(snps[22,]) # 22 for now with gencode, else 23.
colnames(snps.maf) <- "MAF-Genotype"
global("MAFGenotype",snps.maf)
snps <- snps[-22,] # 22 for now with gencode, else 23.
if ( VERBOSE == TRUE ) {
# Verbose - Print removing discarded SNPs
cat("\n\nRemoving discarded SNPs:\n")
}
snps <- snps[,-snps.discarded.pos]
snps.genotype <- snps.genotype[,-snps.discarded.pos]
snps.maf <- snps.maf[-snps.discarded.pos,]
suppressMessages(
class(snps) <- "numeric"
)
snps.t <- t(snps)
snps.genotype.t <- t(snps.genotype)
global("snps.t",snps.t)
snps.genotype.t <- cbind.data.frame(snps.genotype.t, snps.maf)
global("snps.genotype.t",snps.genotype.t)
global("GE",GE)
global("snps.discarded",snps.discarded)
createDir("Cis")
createDir("Trans")
snpspos = read.table("~/Dropbox/Erik Schutte Internship 2016/Data/eQTL-data/snp.txt", header = TRUE, stringsAsFactors = FALSE)
genepos = read.table("~/Dropbox/Erik Schutte Internship 2016/Data/eQTL-data/gencode_genes.txt", stringsAsFactors = FALSE)
snpspos <- snpspos[-which(snpspos$SNP %in% snps.discarded),]
pvOutputThreshold_tra = 1e-5
pvOutputThreshold_cis = 0.05
cisDist = 5e5 # 500 change this
useModel = modelLINEAR_CROSS; # modelANOVA, modelLINEAR, or modelLINEAR_CROSS
useCase = "timepoints" # timepoints, all
if (useCase == 'all') {
covariates_file_name = "~/Dropbox/Erik Schutte Internship 2016/Data/eQTL-data/covariates_leiden_samples.txt"
} else {
covariates_file_name = character()
}
errorCovariance = numeric();
transqtls <- NULL
cisqtls <- NULL
if (useCase == 'timepoints') {
# Load genotype data.
snps.sd = SlicedData$new()
snps.sd$CreateFromMatrix(snps.t)
snps.sd$fileDelimiter = "\t";      # the TAB character
snps.sd$fileOmitCharacters = "NA"; # denote missing values;
snps.sd$fileSkipRows = 1;          # one row of column labels
snps.sd$fileSkipColumns = 1;       # one column of row labels
snps.sd$fileSliceSize = 2000;      # read file in slices of 2,000 rows
# Analysis genotype data versus gene expression data requries a loop through the
# different timepoints measured in the gene expression data.
time_intervals <- list(t0 = seq(1,dim(GE)[2],4),
t10 = seq(2,dim(GE)[2],4),
t30 = seq(3,dim(GE)[2],4),
t180 = seq(4,dim(GE)[2],4))
# Change gene expression data to 4 segments for the time intervals.
for (interval in time_intervals) {
# Pattern for output file name.
pattern_name.cis <- paste(mainDir,subDir,"lncrna_eqtl_cis_",names(time_intervals[interval])[1],".csv",sep="")
pattern_name.trans <- paste(mainDir,subDir,"lncrna_eqtl_trans_",names(time_intervals[interval])[1],".csv",sep="")
mapping(pattern_name.cis, pattern_name.trans, useCase, snps.sd,
snpspos, genepos, pvOutputThreshold_cis, pvOutputThreshold_tra, cisDist,
useModel, covariates_file_name, errorCovariance, time_intervals, interval)
}
} else {
# Multiply genotypes from 22 to 88 samples.
snps.t <- cbind(snps.t, snps.t) # 44
snps.t <- cbind(snps.t, snps.t) # 88
# Load genotype data.
snps.sd = SlicedData$new()
snps.sd$CreateFromMatrix(snps.t)
snps.sd$fileDelimiter = "\t";      # the TAB character
snps.sd$fileOmitCharacters = "NA"; # denote missing values;
snps.sd$fileSkipRows = 1;          # one row of column labels
snps.sd$fileSkipColumns = 1;       # one column of row labels
snps.sd$fileSliceSize = 2000;      # read file in slices of 2,000 rows
# Set pattern names.
pattern_name.cis <- paste(mainDir,subDir,"lncrna_interactive_eqtl_cis_all_timepoints.csv",sep="")
pattern_name.trans <- paste(mainDir,subDir,"lncrna_interactive_eqtl_trans_all_timepoints.csv",sep="")
# Do the mapping.
mapping(pattern_name.cis, pattern_name.trans, useCase, snps.sd,
snpspos, genepos, pvOutputThreshold_cis, pvOutputThreshold_tra,
cisDist, useModel, covariates_file_name, errorCovariance)
}
useModel = modelLINEAR; # modelANOVA, modelLINEAR, or modelLINEAR_CROSS
useCase = "timepoints" # timepoints, all
if (useCase == 'all') {
covariates_file_name = "~/Dropbox/Erik Schutte Internship 2016/Data/eQTL-data/covariates_leiden_samples.txt"
} else {
covariates_file_name = character()
}
errorCovariance = numeric();
transqtls <- NULL
cisqtls <- NULL
if (useCase == 'timepoints') {
# Load genotype data.
snps.sd = SlicedData$new()
snps.sd$CreateFromMatrix(snps.t)
snps.sd$fileDelimiter = "\t";      # the TAB character
snps.sd$fileOmitCharacters = "NA"; # denote missing values;
snps.sd$fileSkipRows = 1;          # one row of column labels
snps.sd$fileSkipColumns = 1;       # one column of row labels
snps.sd$fileSliceSize = 2000;      # read file in slices of 2,000 rows
# Analysis genotype data versus gene expression data requries a loop through the
# different timepoints measured in the gene expression data.
time_intervals <- list(t0 = seq(1,dim(GE)[2],4),
t10 = seq(2,dim(GE)[2],4),
t30 = seq(3,dim(GE)[2],4),
t180 = seq(4,dim(GE)[2],4))
# Change gene expression data to 4 segments for the time intervals.
for (interval in time_intervals) {
# Pattern for output file name.
pattern_name.cis <- paste(mainDir,subDir,"lncrna_eqtl_cis_",names(time_intervals[interval])[1],".csv",sep="")
pattern_name.trans <- paste(mainDir,subDir,"lncrna_eqtl_trans_",names(time_intervals[interval])[1],".csv",sep="")
mapping(pattern_name.cis, pattern_name.trans, useCase, snps.sd,
snpspos, genepos, pvOutputThreshold_cis, pvOutputThreshold_tra, cisDist,
useModel, covariates_file_name, errorCovariance, time_intervals, interval)
}
} else {
# Multiply genotypes from 22 to 88 samples.
snps.t <- cbind(snps.t, snps.t) # 44
snps.t <- cbind(snps.t, snps.t) # 88
# Load genotype data.
snps.sd = SlicedData$new()
snps.sd$CreateFromMatrix(snps.t)
snps.sd$fileDelimiter = "\t";      # the TAB character
snps.sd$fileOmitCharacters = "NA"; # denote missing values;
snps.sd$fileSkipRows = 1;          # one row of column labels
snps.sd$fileSkipColumns = 1;       # one column of row labels
snps.sd$fileSliceSize = 2000;      # read file in slices of 2,000 rows
# Set pattern names.
pattern_name.cis <- paste(mainDir,subDir,"lncrna_interactive_eqtl_cis_all_timepoints.csv",sep="")
pattern_name.trans <- paste(mainDir,subDir,"lncrna_interactive_eqtl_trans_all_timepoints.csv",sep="")
# Do the mapping.
mapping(pattern_name.cis, pattern_name.trans, useCase, snps.sd,
snpspos, genepos, pvOutputThreshold_cis, pvOutputThreshold_tra,
cisDist, useModel, covariates_file_name, errorCovariance)
}
head(GE)
head(rownames(snps.t))
